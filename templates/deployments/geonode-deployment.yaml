apiVersion: apps/v1
kind: Deployment
metadata:
    # annotations:
    #     io.rancher.container.pull_image: always
    #     io.rancher.scheduler.affinity:host_label: geonode.production=geonode
    #     kompose.cmd: ./migration-tools-0.1.3 parse --docker-file export/scanterra.PROD/scanagroempresa/docker-compose.yml
    #         --rancher-file export/scanterra.PROD/scanagroempresa/rancher-compose.yml
    #         --output-file parse2-scanagroempresa.PROD
    #     kompose.version: 1.21.0 (992df58d8)
    #     org.geonode.component: nginx
    #     org.geonode.instance.name: geonode
    # creationTimestamp: null
    labels:
        io.kompose.service: geonode
    name: geonode
    namespace: scanagroempresa
spec:
    replicas: 1
    selector:
        matchLabels:
            io.kompose.service: geonode
    strategy:
        type: Recreate
    template:
        metadata:
            # annotations:
            #     io.rancher.container.pull_image: always
            #     io.rancher.scheduler.affinity:host_label: geonode.production=geonode
            #     kompose.cmd: ./migration-tools-0.1.3 parse --docker-file export/scanterra.PROD/scanagroempresa/docker-compose.yml
            #         --rancher-file export/scanterra.PROD/scanagroempresa/rancher-compose.yml
            #         --output-file parse2-scanagroempresa.PROD
            #     kompose.version: 1.21.0 (992df58d8)
            #     org.geonode.component: nginx
            #     org.geonode.instance.name: geonode
            # creationTimestamp: null
            labels:
                io.kompose.service: geonode
                # org.geonode.component: nginx
                # org.geonode.instance.name: geonode
        spec:
            imagePullSecrets:
            - name: dockerhub
            containers:
            - name: nginx-geonode
              image: scanterra/nginx-geonode:latest
              imagePullPolicy: Always
              ports:
                - containerPort: 80
                  hostPort: 71
                  protocol: TCP
              resources: {}
              stdin: true
              volumeMounts:
                - mountPath: /mnt/volumes/statics
                  name: scanagroempresa-statics
              livenessProbe:
                  failureThreshold: 3
                  timeoutSeconds: 2
                  successThreshold: 1
                  initialDelaySeconds: 10
                  periodSeconds: 2
                  httpGet:
                      path: /
                      port: 80
                      scheme: HTTP
              readinessProbe:
                  failureThreshold: 3
                  timeoutSeconds: 2
                  successThreshold: 2
                  initialDelaySeconds: 10
                  periodSeconds: 2
                  httpGet:
                      path: /
                      port: 80
                      scheme: HTTP
            restartPolicy: Always
            serviceAccountName: ""
            volumes:
              - name: scanagroempresa-statics
                persistentVolumeClaim:
                    claimName: scanagroempresa-statics
            affinity:
                nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                        nodeSelectorTerms:
                          - matchExpressions:
                            - key: geonode.production
                              operator: In
                              values:
                              - geonode
status: {}
